import camion.*
import cosas.*

describe "Prueba de objetos"{
    
    test "Un knight rider pesa 500kg y tiene peligrosidad 10" {
        assert.equals(500, knightRider.peso())
        assert.equals(10, knightRider.nivelPeligrosidad())
    }
    test "Un paquete con 100kg de arena pesa 100kg y tiene peligrosidad 1"{
        const ag = new ArenaAGranel(cantidad = 100)
        assert.equals(100, ag.peso())
        assert.equals(1, ag.nivelPeligrosidad())
    }
    test "Un bumblebee que es auto pesa 800 y tiene peligrosidad 15" {
        assert.equals(800, bumblebee.peso())
        assert.equals(15, bumblebee.nivelPeligrosidad())
    }
    test "Un bumblebee que es robot pesa 800 y tiene peligrosidad 30" {
        assert.equals(800, bumblebee.peso())
        bumblebee.cambiarModo()
        assert.equals(30, bumblebee.nivelPeligrosidad())
    }
    test "Un paquete de 100 ladrillos pesa 200kg y tiene peligrosidad 2" {
        const pl = new PaqueteDeLadrillos(cantidad = 100)
        assert.equals(200, pl.peso())
        assert.equals(2, pl.nivelPeligrosidad())
    }
    test "Una bateria antiaerea con misiles pesa 300 y tiene peligrosidad 100" {
        const ba = new BateriaAntiaerea(tieneMisiles = true)
        assert.equals(300, ba.peso())
        assert.equals(100, ba.nivelPeligrosidad())
    }
    test "Una bateria antiaerea sin misiles pesa 200 y tiene peligrosidad 0" {
        const ba = new BateriaAntiaerea(tieneMisiles = false)
        assert.equals(200, ba.peso())
        assert.equals(0, ba.nivelPeligrosidad())
    }
    test "Un paquete de 100kg de residuos radiactivos pesa 100kg y tiene peligrosidad 200" {
        const rr = new ResiduosRadiactivos(cantidad = 100)
        assert.equals(100, rr.peso())
        assert.equals(200, rr.nivelPeligrosidad())
    }
}
describe "Carga en camion"{
   
    test "Si no cargo nada el camion esta vacio" {
        assert.equals(#{}, camion.todaLaCarga())
        assert.equals(true, camion.estaVacio())
    }
    test "Cargar varias cosas"{
        camion.cargar(knightRider)
        assert.equals(#{knightRider}, camion.todaLaCarga())//Solo tiene al knightRider
        camion.cargar(bumblebee)
        assert.equals(#{knightRider, bumblebee}, camion.todaLaCarga())//Tiene al knightRider y bumblebee
        camion.descargar(bumblebee)
        assert.equals(#{knightRider}, camion.todaLaCarga())//Solo tiene al knightRider de nuevo
        camion.cargar(knightRider)
        camion.descargar(bumblebee)
    }
    test "Un bumblebee y 50kg de arena tienen peso par"{
        const arena50kg = new ArenaAGranel(cantidad = 50)
        camion.cargar(bumblebee)
        camion.cargar(arena50kg)
        assert.equals(true, camion.pesoTotalPar())
    }
    test "55 kg de arena NO tiene peso par"{
        const arena55kg = new ArenaAGranel(cantidad =55)
        camion.cargar(arena55kg)
        assert.equals(false, camion.pesoTotalPar())
    }
    test "Hay carga con peso X"{
        camion.cargar(bumblebee)
        assert.equals(true, camion.hayCargaConPeso(800))
    }
    test "Hay carga con peso X (varios elementos)"{
        const arena50kg = new ArenaAGranel(cantidad = 50)
        camion.cargar(bumblebee)
        camion.cargar(arena50kg)
        assert.equals(true, camion.hayCargaConPeso(50))
        assert.equals(true, camion.hayCargaConPeso(800))
        assert.equals(false, camion.hayCargaConPeso(500))
    }
}
describe "Peso en el camion" {
    test "Con un paquete de 300 ladrillos y un bumblebee el camion no esta lleno"{
        const pl = new PaqueteDeLadrillos(cantidad = 300)
        camion.cargar(pl)
        camion.cargar(bumblebee)
        assert.equals(2400, camion.pesoTotal())
        assert.equals(false, camion.estaLleno())
    }
    test "Con un paquete de 400 ladrillos y un bumblebee el camion esta lleno"{
        const pl = new PaqueteDeLadrillos(cantidad = 400)
        camion.cargar(pl)
        camion.cargar(bumblebee)
        assert.equals(2600, camion.pesoTotal())
        assert.equals(true, camion.estaLleno())
    }
}
describe "Peligrosidad en el camion"{ 
    test "Buscar objeto peligroso entre un bumblebee, una bateriaerea y residuos radiactivos"{
        const bateria = new BateriaAntiaerea(tieneMisiles = false)
        const residuosRadiactivos = new ResiduosRadiactivos(cantidad = 100)
        camion.cargar(bumblebee)
        camion.cargar(bateria)
        camion.cargar(residuosRadiactivos)
        assert.equals(bateria, camion.cosaConPeligrosidad(0))
        assert.equals(bumblebee, camion.cosaConPeligrosidad(15))
        assert.equals(residuosRadiactivos, camion.cosaConPeligrosidad(200))
        assert.throwsException({camion.cosaConPeligrosidad(30)})//No hay ninguno con peligrosidad 30
        bumblebee.cambiarModo()
        assert.equals(bumblebee, camion.cosaConPeligrosidad(30))
    }
    test "Cosas mas peligrosas que nivel dado"{
        const bateria = new BateriaAntiaerea(tieneMisiles = true)
        const paqueteLadrillosDe10 = new PaqueteDeLadrillos(cantidad = 10)
        const residuos = new ResiduosRadiactivos(cantidad = 100)
        camion.cargar(bateria)
        camion.cargar(knightRider)
        assert.equals(#{bateria}, camion.cosasQueSuperanPeligrosidad(15))
        assert.equals(#{bateria}, camion.cosasMasPeligrosasQue(bumblebee))
        assert.equals(#{bateria, knightRider}, camion.cosasQueSuperanPeligrosidad(2))
        assert.equals(#{bateria, knightRider}, camion.cosasMasPeligrosasQue(paqueteLadrillosDe10))
        assert.equals(#{}, camion.cosasQueSuperanPeligrosidad(200))
        assert.equals(#{}, camion.cosasMasPeligrosasQue(residuos))
    }

}
describe "Circular en rutas"{
    test "Camion vacio puede circular en cualquier ruta"{
        assert.equals(true, camion.puedeCircularEnRutaDeNivel(0))
        assert.equals(true, camion.puedeCircularEnRutaDeNivel(10))
        assert.equals(true, camion.puedeCircularEnRutaDeNivel(1000))
    }
    test "Camion con solo un bumblebee modo auto puede circular en rutas de nivel 15 o mas"{
        camion.cargar(bumblebee)
        assert.equals(false, camion.puedeCircularEnRutaDeNivel(10))
        assert.equals(true, camion.puedeCircularEnRutaDeNivel(15))
        assert.equals(true, camion.puedeCircularEnRutaDeNivel(20))
    }
    test "Un camion con un bumblebee auto y un paquete de 300 ladrillos puede circular en una ruta de nivel 20"{
        const paquete300Ladrillos = new PaqueteDeLadrillos(cantidad = 300)
        camion.cargar(bumblebee)
        camion.cargar(paquete300Ladrillos)
        assert.equals(true, camion.puedeCircularEnRutaDeNivel(20))
    }
    test "Un camion con un bumblebee auto y un paquete de 400 ladrillos no puede circular en ruta nivel 20 por peso"{
        const paquete400Ladrillos = new PaqueteDeLadrillos(cantidad = 400)
        camion.cargar(bumblebee)
        camion.cargar(paquete400Ladrillos)
        assert.equals(true, camion.estaLleno())
        assert.equals(false, camion.puedeCircularEnRutaDeNivel(20))
    }
    test "Un camion con un bumblebee robot y un paquete de 300 ladrillos no puede circular en ruta de nivel 20 por peligrosdad"{
        const paquete300Ladrillos = new PaqueteDeLadrillos(cantidad = 300)
        camion.cargar(paquete300Ladrillos)
        bumblebee.cambiarModo()
        camion.cargar(bumblebee)
        assert.equals(false, camion.estaLleno())
        assert.equals(false, camion.puedeCircularEnRutaDeNivel(20))
    }

}
describe "Prueba de los nuevos objetos"{
    test "Un contenedor portuario vacio pesa 100kg y tiene peligrosidad 0"{
        assert.equals(100, contenedorPortuario.peso())
        assert.equals(0, contenedorPortuario.nivelPeligrosidad())
    }
    test "Un contenedor con un knight rider y 50kg de arena pesa 650kg y tiene peligrosidad 10"{
        const arena50kg = new ArenaAGranel(cantidad = 50)
        contenedorPortuario.cargar(knightRider)
        contenedorPortuario.cargar(arena50kg)
        assert.equals(650, contenedorPortuario.peso())
        assert.equals(10, contenedorPortuario.nivelPeligrosidad())
    }
    test "Si embalaje envuelve a knight rider pesa 500kg y tiene peligrosidad 5"{
        const embalaje = new EmbalajeDeSeguridad(cosaEmbalada = knightRider)
        assert.equals(500, embalaje.peso())
        assert.equals(5, embalaje.nivelPeligrosidad())
    }
    test "Si embalaje envuelve a Bumblebee modo auto pesa 800kg y tiene peligrosidad 7,5"{
        const embalaje = new EmbalajeDeSeguridad(cosaEmbalada = bumblebee)
        assert.equals(800, embalaje.peso())
        assert.equals(7.5, embalaje.nivelPeligrosidad())
    }
}
describe "Camion con nuevos mensajes de peso"{
    test "Saber si hay algo con peso entre 2 pesos dados"{
        const paquete300Ladrillos = new PaqueteDeLadrillos(cantidad = 300)
        camion.cargar(bumblebee)
        camion.cargar(paquete300Ladrillos)
        assert.equals(true, camion.tieneAlgoQuePesaEntre(5, 700))
        assert.equals(true, camion.tieneAlgoQuePesaEntre(5, 1000))
        assert.equals(false, camion.tieneAlgoQuePesaEntre(900, 1000))
    }
    test "Entre un bumblebee y un paquete de 300 ladrillos, la cosa mas pesada es bumblebee"{
        const paquete300Ladrillos = new PaqueteDeLadrillos(cantidad = 300)
        camion.cargar(bumblebee)
        camion.cargar(paquete300Ladrillos)
        assert.equals(bumblebee, camion.cosaMasPesada())
    }
    test "Si el camion esta vacio, tira una excepcion"{
        assert.throwsException({camion.cosaMasPesada()})
    }
    test "Peso de cada cosa cargada"{
        const paquete300Ladrillos = new PaqueteDeLadrillos(cantidad = 300)
        camion.cargar(bumblebee)
        camion.cargar(paquete300Ladrillos)
        assert.equals([800, 600], camion.pesoDeCadaCosaCargada())
    }
    
}
describe "Prueba cosas con bultos" {
    test "knight Rider, arena a granel y residuos radiactivos tienen un bulto siempre" {
        const arena = new ArenaAGranel(cantidad = 100)
        const residuos = new ResiduosRadiactivos(cantidad = 100)
        assert.equals(1, knightRider.bulto())
        assert.equals(1, arena.bulto())
        assert.equals(1, residuos.bulto())
    }
    test "bumblebee y embalaje de seguridad tienen 2 bultos siempre"{
        const embalaje = new EmbalajeDeSeguridad(cosaEmbalada = bumblebee)
        assert.equals(2, bumblebee.bulto())
        assert.equals(2, embalaje.bulto())
        bumblebee.cambiarModo()//No cambia la cantidad de bultos
        assert.equals(2, bumblebee.bulto())
    }
    test "Un paquete de ladrillos tiene 1 bulto si tiene menos de 100 ladrillos, y 2 si tiene entre 101 y 300 ladrillos o 3 si tiene mas"{
        const paquete50Ladrillos = new PaqueteDeLadrillos(cantidad = 50)
        const paquete250Ladrillos = new PaqueteDeLadrillos(cantidad = 250)
        const paquete500Ladrillos = new PaqueteDeLadrillos(cantidad = 500)
        assert.equals(1, paquete50Ladrillos.bulto())
        assert.equals(2, paquete250Ladrillos.bulto())
        assert.equals(3, paquete500Ladrillos.bulto())
    }
    test "Una bateria antiaerea tiene 1 bulto si no tiene misiles y 2 si tiene misiles"{
        const bateriaSinMisiles = new BateriaAntiaerea(tieneMisiles = false)
        const bateriaConMisiles = new BateriaAntiaerea(tieneMisiles = true)
        assert.equals(1, bateriaSinMisiles.bulto())
        assert.equals(2, bateriaConMisiles.bulto())
    }
    test "Un contenedor portuario tiene 1 bulto mas la suma de los bultos de las cosas que contiene"{
        const paquete55Ladrillos = new PaqueteDeLadrillos(cantidad = 55)
        const bateriaConMisiles = new BateriaAntiaerea(tieneMisiles = true)
        contenedorPortuario.cargar(paquete55Ladrillos)//1
        contenedorPortuario.cargar(bateriaConMisiles)//2
        contenedorPortuario.cargar(bumblebee)//2
        assert.equals(6, contenedorPortuario.bulto())//1 del contenedor
    }
}
describe "Caso bultos"{
    test "Un camion vacio tiene 0 bultos"{
        assert.equals(0, camion.cantidadDeBultosTotal())
    }
    test "Un camion con un embalaje,arena, un paquete de 50 ladrillos, una bateria descargada,y un contenedor con knightRider y un bumblebee, tiene 9 bultos"{
        const embalaje = new EmbalajeDeSeguridad(cosaEmbalada = new ResiduosRadiactivos(cantidad = 100))
        const arena = new ArenaAGranel(cantidad = 100)
        const paquete50Ladrillos = new PaqueteDeLadrillos(cantidad = 50)
        const bateriaSinMisiles = new BateriaAntiaerea(tieneMisiles = false)
        contenedorPortuario.cargar(knightRider)
        contenedorPortuario.cargar(bumblebee)
        camion.cargar(embalaje)
        camion.cargar(arena)
        camion.cargar(paquete50Ladrillos)
        camion.cargar(bateriaSinMisiles)
        camion.cargar(contenedorPortuario)
        assert.equals(9, camion.cantidadDeBultosTotal())
    }
    test "Un camion con un paquete de 150 ladrillos, una bateria cargada, un contenedor vacio tiene 5 bultos"{
        const paquete150Ladrillos = new PaqueteDeLadrillos(cantidad = 150)
        const bateriaConMisiles = new BateriaAntiaerea(tieneMisiles = true)
        camion.cargar(paquete150Ladrillos)
        camion.cargar(bateriaConMisiles)
        camion.cargar(contenedorPortuario)
        assert.equals(5, camion.cantidadDeBultosTotal())
    }
    test "Un camion con un paquete de 350 ladrillos, y arena a granel tiene 4 bultos"{
        const paquete350Ladrillos = new PaqueteDeLadrillos(cantidad = 350)
        const arena = new ArenaAGranel(cantidad = 100)
        camion.cargar(paquete350Ladrillos)
        camion.cargar(arena)
        assert.equals(4, camion.cantidadDeBultosTotal())
    }
}
describe "Camion tiene accidentes"{
    test "Camion sufre accidente con contenedor(knightRider y bumblebee auto), embalaje(30kg residuos), 50kg arena, paquete 100 ladrillos y bateria cargada"{
        contenedorPortuario.cargar(knightRider)
        contenedorPortuario.cargar(bumblebee)
        const residuosRadioactivos = new ResiduosRadiactivos(cantidad = 30)
        const embalaje = new EmbalajeDeSeguridad(cosaEmbalada = residuosRadioactivos)
        const arena = new ArenaAGranel(cantidad = 50)
        const paquete100Ladrillos = new PaqueteDeLadrillos(cantidad =100)
        const bateriaConMisiles = new BateriaAntiaerea(tieneMisiles = true)
        camion.cargar(contenedorPortuario)
        camion.cargar(embalaje)// No cambia
        camion.cargar(arena)
        camion.cargar(paquete100Ladrillos)
        camion.cargar(bateriaConMisiles)
        camion.huboAccidente()
        assert.equals(30, bumblebee.nivelPeligrosidad())//Si es 30 esta en modo robot
        assert.equals(70, arena.peso())
        assert.equals(88, paquete100Ladrillos.peso()/2)
        assert.equals(false, bateriaConMisiles.tieneMisiles())
        assert.equals(30, residuosRadioactivos.peso())

    }
    test "Camion sufre accidente con bumblebee(robot), 30kg de residuos, un paquete de 10 ladrillos y una bateria descargada"{
        bumblebee.cambiarModo()//Pongo a bumblebee en modo robot
        const residuosRadioactivos = new ResiduosRadiactivos(cantidad = 30)
        const paquete10Ladrillos = new PaqueteDeLadrillos(cantidad =10)
        const bateriaSinMisiles = new BateriaAntiaerea(tieneMisiles = false)
        camion.cargar(bumblebee)
        camion.cargar(residuosRadioactivos)
        camion.cargar(paquete10Ladrillos)
        camion.cargar(bateriaSinMisiles)
        camion.huboAccidente()
        assert.equals(15, bumblebee.nivelPeligrosidad())
        assert.equals(45, residuosRadioactivos.peso())
        assert.equals(0, paquete10Ladrillos.peso())
        assert.equals(false, bateriaSinMisiles.tieneMisiles())
    
    }
}